// Code generated by MockGen. DO NOT EDIT.
// Source: rtorrent/rtorrent.go
//
// Generated by this command:
//
//	mockgen -source=rtorrent/rtorrent.go -destination=rtorrent/rtorrent_moq.go -mock_names=New=NewMockClient -package=rtorrent
//

// Package rtorrent is a generated GoMock package.
package rtorrent

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// DownloadRate mocks base method.
func (m *MockClient) DownloadRate() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadRate")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadRate indicates an expected call of DownloadRate.
func (mr *MockClientMockRecorder) DownloadRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadRate", reflect.TypeOf((*MockClient)(nil).DownloadRate))
}

// DownloadTotal mocks base method.
func (m *MockClient) DownloadTotal() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadTotal")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadTotal indicates an expected call of DownloadTotal.
func (mr *MockClientMockRecorder) DownloadTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadTotal", reflect.TypeOf((*MockClient)(nil).DownloadTotal))
}

// UploadRate mocks base method.
func (m *MockClient) UploadRate() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadRate")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadRate indicates an expected call of UploadRate.
func (mr *MockClientMockRecorder) UploadRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadRate", reflect.TypeOf((*MockClient)(nil).UploadRate))
}

// UploadTotal mocks base method.
func (m *MockClient) UploadTotal() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTotal")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadTotal indicates an expected call of UploadTotal.
func (mr *MockClientMockRecorder) UploadTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTotal", reflect.TypeOf((*MockClient)(nil).UploadTotal))
}

// getInt mocks base method.
func (m *MockClient) getInt(method, arg string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getInt", method, arg)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getInt indicates an expected call of getInt.
func (mr *MockClientMockRecorder) getInt(method, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getInt", reflect.TypeOf((*MockClient)(nil).getInt), method, arg)
}

// getSliceSlice mocks base method.
func (m *MockClient) getSliceSlice(method string, args ...string) ([][]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "getSliceSlice", varargs...)
	ret0, _ := ret[0].([][]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSliceSlice indicates an expected call of getSliceSlice.
func (mr *MockClientMockRecorder) getSliceSlice(method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSliceSlice", reflect.TypeOf((*MockClient)(nil).getSliceSlice), varargs...)
}

// getSliceSliceByHash mocks base method.
func (m *MockClient) getSliceSliceByHash(method string, args ...string) ([][]any, error) {
	m.ctrl.T.Helper()
	varargs := []any{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "getSliceSliceByHash", varargs...)
	ret0, _ := ret[0].([][]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getSliceSliceByHash indicates an expected call of getSliceSliceByHash.
func (mr *MockClientMockRecorder) getSliceSliceByHash(method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getSliceSliceByHash", reflect.TypeOf((*MockClient)(nil).getSliceSliceByHash), varargs...)
}

// getString mocks base method.
func (m *MockClient) getString(method, arg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getString", method, arg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getString indicates an expected call of getString.
func (mr *MockClientMockRecorder) getString(method, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getString", reflect.TypeOf((*MockClient)(nil).getString), method, arg)
}

// getStringSlice mocks base method.
func (m *MockClient) getStringSlice(method string, args ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "getStringSlice", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getStringSlice indicates an expected call of getStringSlice.
func (mr *MockClientMockRecorder) getStringSlice(method any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStringSlice", reflect.TypeOf((*MockClient)(nil).getStringSlice), varargs...)
}
